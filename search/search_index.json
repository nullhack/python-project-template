{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"index.html#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"index.html#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml\ndocs/\n    index.md\n</code></pre>"},{"location":"readme.html","title":"Readme","text":"Python Project Template <p>     Python template with some awesome tools to quickstart any Python project      Explore the docs \u00bb Report Bug     \u00b7     Request Feature </p> Table of Contents <ol> <li> About The Project </li> <li> Getting Started <ul> <li>Prerequisites</li> <li>Installation</li> </ul> </li> <li>Usage</li> <li>Roadmap</li> <li>Contributing</li> <li>License</li> <li>Contact</li> <li>Acknowledgments</li> </ol>"},{"location":"readme.html#about-the-project","title":"About The Project","text":"<p>Python template with some awesome tools to quickstart any Python project</p> <p>(back to top)</p>"},{"location":"readme.html#getting-started","title":"Getting Started","text":"<p>To run this project locally, you will need to install the prerequisites and follow the installation section.</p>"},{"location":"readme.html#prerequisites","title":"Prerequisites","text":"<p>This Project depends on the following projects. * Poetry   <code>sh   pip install --user --upgrade poetry</code></p> <ul> <li>Poe the Poet   <code>sh   pip install --user --upgrade poethepoet</code></li> </ul>"},{"location":"readme.html#installation","title":"Installation","text":"<ol> <li>Clone the repo    <code>sh    git clone https://github.com/nullhack/python-project-template    cd python-project-template</code></li> <li>Install Poe the Poet and Poetry    <code>sh    pip install --user --upgrade poethepoet poetry</code></li> <li>Install requirements for development    <code>sh    poe install-dev</code></li> <li>Run tests    <code>sh    poe test</code></li> </ol> <p>(back to top)</p>"},{"location":"readme.html#usage","title":"Usage","text":"<p>Some useful examples of how this project can be used:</p> <ul> <li> <p>Install requirements    <code>sh    poe install-dev</code></p> </li> <li> <p>Run tests    <code>sh    poe test</code></p> </li> <li> <p>Run the project    <code>sh    poe run</code></p> </li> <li> <p>Generate API documentation    <code>sh    poe doc</code></p> </li> <li> <p>Build a docker image for tests    <code>sh    poe docker-build --target test --build-tag 3.10-alpine    docker run -ti --rm python_package_template:test-3.10-alpine</code></p> </li> <li> <p>Build a docker image to run the root files only without running any test    <code>sh    poe docker-build --target prod --build-tag 3.10-alpine --no-test    docker run -ti --rm python_package_template:prod-3.10-alpine</code></p> </li> </ul> <p>For more examples, please refer to the Documentation</p> <p>(back to top)</p>"},{"location":"readme.html#roadmap","title":"Roadmap","text":"<ul> <li>[x] Add tests</li> <li>[x] Add code coverage</li> <li>[x] Improve documentation</li> <li>[ ] Include more tests</li> </ul> <p>See the open issues for a full list of proposed features (and known issues).</p> <p>(back to top)</p>"},{"location":"readme.html#contributing","title":"Contributing","text":"<p>Any contributions you make are greatly appreciated.</p> <p>If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\". Don't forget to give the project a star! Thanks again!</p> <ol> <li>Fork the Project</li> <li>Create your Feature Branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your Changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the Branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol> <p>(back to top)</p>"},{"location":"readme.html#contact","title":"Contact","text":"<p>Eric Lopes - @nullhack - nullhack@users.noreply.github.com</p> <p>Project Link: https://github.com/nullhack/python-project-template/</p> <p>(back to top)</p>"},{"location":"readme.html#acknowledgments","title":"Acknowledgments","text":"<p>This project was created using cookiecutter and NullHack's python-project-template:</p> <ul> <li>NullHack's python-project-template</li> </ul> <p>(back to top)</p>"},{"location":"readme.html#license","title":"License","text":"<p>Distributed under the MIT License. See <code>LICENSE</code> for more information.</p> <p>(back to top)</p>"},{"location":"reference.html","title":"Reference","text":"<p>Python template with some awesome tools to quickstart any Python project.</p>"},{"location":"reference.html#python_package_template.python_module_template","title":"python_module_template","text":"<p>Module Docstring.</p>"},{"location":"reference.html#python_package_template.python_module_template.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger('python_module_template')\n</code></pre>"},{"location":"reference.html#python_package_template.python_module_template.Calculator","title":"Calculator","text":"<p>Class for simple calculator operations.</p> Source code in <code>python_package_template/python_module_template.py</code> <pre><code>class Calculator:\n    \"\"\"Class for simple calculator operations.\"\"\"\n\n    @staticmethod\n    def divide(a: float, b: float) -&gt; float:\n        \"\"\"Divide a by b.\n\n        Args:\n            a (float): Dividend.\n            b (float): Divisor.\n\n        Returns:\n            float: The result of the division.\n\n        Raises:\n            ZeroDivisionError: if b is 0.\n            TypeError: if a or b are not float numbers.\n\n        Examples:\n            You can run this function as following.\n\n            &gt;&gt;&gt; Calculator.divide(2,1)\n            2.0\n\n        \"\"\"\n        if b == 0:\n            raise ZeroDivisionError\n        elif type(a) not in (float, int) or type(b) not in (float, int):\n            raise TypeError\n        return a / b\n</code></pre>"},{"location":"reference.html#python_package_template.python_module_template.Calculator.divide","title":"divide  <code>staticmethod</code>","text":"<pre><code>divide(a, b)\n</code></pre> <p>Divide a by b.</p> <p>Parameters:</p> <ul> <li> <code>a</code>             (<code>float</code>)         \u2013          <p>Dividend.</p> </li> <li> <code>b</code>             (<code>float</code>)         \u2013          <p>Divisor.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float</code> (            <code>float</code> )        \u2013          <p>The result of the division.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ZeroDivisionError</code>           \u2013          <p>if b is 0.</p> </li> <li> <code>TypeError</code>           \u2013          <p>if a or b are not float numbers.</p> </li> </ul> <p>Examples:</p> <p>You can run this function as following.</p> <pre><code>&gt;&gt;&gt; Calculator.divide(2,1)\n2.0\n</code></pre> Source code in <code>python_package_template/python_module_template.py</code> <pre><code>@staticmethod\ndef divide(a: float, b: float) -&gt; float:\n    \"\"\"Divide a by b.\n\n    Args:\n        a (float): Dividend.\n        b (float): Divisor.\n\n    Returns:\n        float: The result of the division.\n\n    Raises:\n        ZeroDivisionError: if b is 0.\n        TypeError: if a or b are not float numbers.\n\n    Examples:\n        You can run this function as following.\n\n        &gt;&gt;&gt; Calculator.divide(2,1)\n        2.0\n\n    \"\"\"\n    if b == 0:\n        raise ZeroDivisionError\n    elif type(a) not in (float, int) or type(b) not in (float, int):\n        raise TypeError\n    return a / b\n</code></pre>"},{"location":"tests.html","title":"Tests","text":"<p>Tests module.</p>"},{"location":"tests.html#tests.python_package_template_test","title":"python_package_template_test","text":"<p>This file contains examples of how to write tests using pytest!</p> <p>Some good practices for writting great Python tests:</p> <p>Source: https://www.nerdwallet.com/blog/engineering/5-pytest-best-practices/</p> <ul> <li>Prefer mocker over mock</li> <li>Parametrize the same behavior, have different tests for different behaviors</li> <li>Don\u2019t modify fixture values in other fixtures</li> <li>Prefer responses over mocking outbound HTTP requests</li> <li>Prefer tmpdir over global test artifacts</li> </ul>"},{"location":"tests.html#tests.python_package_template_test.TestGroup","title":"TestGroup","text":"<p>A class with common parameters, <code>param1</code> and <code>param2</code>.</p> Source code in <code>tests/python_package_template_test.py</code> <pre><code>@pytest.mark.parametrize(\n    (\"param1\", \"param2\"),\n    [\n        (\"a\", \"b\"),\n        (\"c\", \"d\"),\n    ],\n)\nclass TestGroup:\n    \"\"\"A class with common parameters, `param1` and `param2`.\"\"\"\n\n    @pytest.fixture()\n    def fixt(self: Self) -&gt; int:\n        \"\"\"This fixture will only be available within the scope of TestGroup.\n\n        Returns:\n            int: A common value to be used by multiple tests\n\n        \"\"\"\n        return 123\n\n    def test_one(self: Self, param1: str, param2: str, fixt: int) -&gt; None:\n        \"\"\"Run the first test using the fixture.\n\n        Args:\n            param1 (str): First parameter.\n            param2 (str): Second parameter.\n            fixt (int): Value from fixture.\n\n        \"\"\"\n        print(\"\\ntest_one\", param1, param2, fixt)\n</code></pre>"},{"location":"tests.html#tests.python_package_template_test.TestGroup.fixt","title":"fixt","text":"<pre><code>fixt()\n</code></pre> <p>This fixture will only be available within the scope of TestGroup.</p> <p>Returns:</p> <ul> <li> <code>int</code> (            <code>int</code> )        \u2013          <p>A common value to be used by multiple tests</p> </li> </ul> Source code in <code>tests/python_package_template_test.py</code> <pre><code>@pytest.fixture()\ndef fixt(self: Self) -&gt; int:\n    \"\"\"This fixture will only be available within the scope of TestGroup.\n\n    Returns:\n        int: A common value to be used by multiple tests\n\n    \"\"\"\n    return 123\n</code></pre>"},{"location":"tests.html#tests.python_package_template_test.TestGroup.test_one","title":"test_one","text":"<pre><code>test_one(param1, param2, fixt)\n</code></pre> <p>Run the first test using the fixture.</p> <p>Parameters:</p> <ul> <li> <code>param1</code>             (<code>str</code>)         \u2013          <p>First parameter.</p> </li> <li> <code>param2</code>             (<code>str</code>)         \u2013          <p>Second parameter.</p> </li> <li> <code>fixt</code>             (<code>int</code>)         \u2013          <p>Value from fixture.</p> </li> </ul> Source code in <code>tests/python_package_template_test.py</code> <pre><code>def test_one(self: Self, param1: str, param2: str, fixt: int) -&gt; None:\n    \"\"\"Run the first test using the fixture.\n\n    Args:\n        param1 (str): First parameter.\n        param2 (str): Second parameter.\n        fixt (int): Value from fixture.\n\n    \"\"\"\n    print(\"\\ntest_one\", param1, param2, fixt)\n</code></pre>"},{"location":"tests.html#tests.python_package_template_test.test_divide_error","title":"test_divide_error","text":"<pre><code>test_divide_error(a, b, expected)\n</code></pre> <p>Check if divide returns correct Exceptions for known entries.</p> <p>Issue raised by https://github.com/nullhack/python-project-template/issues/1337</p> <p>Parameters:</p> <ul> <li> <code>a</code>             (<code>float</code>)         \u2013          <p>Dividend.</p> </li> <li> <code>b</code>             (<code>float</code>)         \u2013          <p>Divisor.</p> </li> <li> <code>expected</code>             (<code>Exception</code>)         \u2013          <p>expected Exception.</p> </li> </ul> Source code in <code>tests/python_package_template_test.py</code> <pre><code>@pytest.mark.parametrize(\n    (\"a\", \"b\", \"expected\"),\n    [\n        (42, \"b\", TypeError),\n        (\"a\", 42, TypeError),\n        (42, 0, ZeroDivisionError),\n    ],\n)\ndef test_divide_error(\n    a: str | float, b: str | float, expected: float | Exception\n) -&gt; None:\n    \"\"\"Check if divide returns correct Exceptions for known entries.\n\n    Issue raised by https://github.com/nullhack/python-project-template/issues/1337\n\n    Args:\n        a (float): Dividend.\n        b (float): Divisor.\n        expected (Exception): expected Exception.\n\n    \"\"\"\n    with pytest.raises(expected):\n        m.Calculator.divide(a, b)\n</code></pre>"},{"location":"tests.html#tests.python_package_template_test.test_divide_ok","title":"test_divide_ok","text":"<pre><code>test_divide_ok(a, b, expected)\n</code></pre> <p>Check if divide works for expected entries.</p> <p>Parameters:</p> <ul> <li> <code>a</code>             (<code>float</code>)         \u2013          <p>Dividend.</p> </li> <li> <code>b</code>             (<code>float</code>)         \u2013          <p>Divisor.</p> </li> <li> <code>expected</code>             (<code>float</code>)         \u2013          <p>expected result.</p> </li> </ul> Source code in <code>tests/python_package_template_test.py</code> <pre><code>@pytest.mark.parametrize(\n    (\"a\", \"b\", \"expected\"),\n    [\n        (1, 1, 1),\n        (42, 1, 42),\n        (84, 2, 42),\n    ],\n)\ndef test_divide_ok(a: float, b: float, expected: float) -&gt; None:\n    \"\"\"Check if divide works for expected entries.\n\n    Args:\n        a (float): Dividend.\n        b (float): Divisor.\n        expected (float): expected result.\n\n    \"\"\"\n    assert m.Calculator.divide(a, b) == expected\n</code></pre>"},{"location":"scenarios/simple_calculation.html","title":"Simple calculation","text":""},{"location":"scenarios/simple_calculation.html#feature-divide","title":"Feature: divide","text":"<pre><code>   The user should be able to divide two numbers.\n</code></pre>"},{"location":"scenarios/simple_calculation.html#scenario-outline-divide-a-by-b","title":"Scenario Outline: Divide 'a' by 'b'","text":"<pre><code>       Given I have two numbers &lt;a&gt; and &lt;b&gt;\n\n       When I divide &lt;a&gt; by &lt;b&gt;\n\n       Then I should see &lt;output&gt;\n\n       Examples:\n       |   a   |   b   | output |\n       |  2.0  |  2.0  |  1.0   |\n       |  6.0  |  2.0  |  3.0   |\n       |  1.0  |  2.0  |  0.5   |\n</code></pre>"}]}